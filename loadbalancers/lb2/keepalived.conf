! vrrp_sync_group asegura que las instancias definidas en el grupo
! permanezcan juntas en un fallo. Es decir, si la instancia INT_GW
! falla en el enrutador principal y se cambia al servidor de backup
! LOAD_BALANCER también lo tendrá que hacer.
vrrp_sync_group VG1 {
    group {
        LOAD_BALANCER
        INT_GW
    }
}

! Script para monitorizar la salud de los enrutadores.
vrrp_script chk_healthcheck {
    script "pidof healthcheck.sh"
}

! Instancia donde se establecera la IP virtual.
vrrp_instance LOAD_BALANCER {
    ! Indica que sera la instancia de respaldo
    state BACKUP
    ! Interfaz sobre la cual se establecera la IP virtual
    interface eth2
    ! ID virtual del router (debe ser el mismo el el router backup y distinto para cada instancia)
    virtual_router_id 1
    ! Prioridad del router (siempre mayor en el MASTER)
    priority 10
    ! Cada cuanto se vota para elegir al MASTER (en segundos, de acuerdo a las prioridades)
    advert_int 1
    ! IP Virtual que se asignara en la interfaz.
    virtual_ipaddress {         
        10.0.2.10
    }
    ! Script para monitorizar el estado del router
    track_script {
        chk_healthcheck
    }
}

! Instancia donde se establecera la IP virtual.
vrrp_instance INT_GW {
    ! Indica que sera la instancia de respaldo
    state BACKUP
    ! Interfaz sobre la cual se establecera la IP virtual
    interface eth3
    ! ID virtual del router (debe ser el mismo el el router backup y distinto para cada instancia)
    virtual_router_id 2
    ! Prioridad del router (siempre mayor en el MASTER)
    priority 100
    ! Cada cuanto se vota para elegir al MASTER (en segundos, de acuerdo a las prioridades)
    advert_int 1
    ! IP Virtual que se asignara en la interfaz.
    virtual_ipaddress {
        10.0.3.100
    }
    ! Script para monitorizar el estado del router
    track_script {
        chk_healthcheck
    }
}
